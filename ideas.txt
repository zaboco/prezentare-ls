livescript
-----------
"a language which compiles to JavaScript"
CoffeeScript + Haskell + more...
sitaxă simplificată
  (almost) no parens 
    whitespace matters
    f 1 2; f! sum 1 2 .should.eql 3
    point = x: 0 y: 0
  comma optional [1 2 3]
  string 
    \shorthand
    "#interpolation",
    operators *, -, /
  lists
    - <[for words]>
    - ranges: [1 to 3] [1 til 3]
    - concatenate ++
    - repetition/join *
  destructure
    [a b] = [1 2]
    {x} = {x: 1, y: 2} # x is 1
    splats -> [x, ...xs]:list = [1 2 3]
  control
    switch |
    post if, unless
    and, or, not, is, in, of
functions
  sintaxă:
    simplified def (def) ->
    implicit return (unless !)
    ! fără args
    default args
  destructure: f = ({x, y}) -> w/defaults
  implicit switch
  curry
  partial application - (+ 1) (+) (.length)
  piping
  composition
prelude-ls - 
  like haskell prelude
  map, filter, find, and many more...
  curried utility functions 
    double-all = map (* 2)
    double-all [1 to 3] # [2 4 6]
oop - 
  - constructor, @, ::, @@
    Array::remove = ({at=0}={}) ->
      @splice at, 1
    [0 to 3].remove at: 1 # 1
  - implicit assigment (@x, @y)
  - extends, implements, super


  Clase    
    constructor

class Number
  (value=0) -> this.value = value
    @ în loc de `this`
class Number
  (value=0) -> @value = value
    atribuire implicită
class Number
  (@value=0) ->


    metode

class Number
  (@value=0) ->
  add: (other) -> @value + other.value
    
    prototype
Number.prototype.inc = -> @value++
    sau ::
Number::inc = -> @value++


    utilizare

a = new Number 2
a.inc!
a.value # 3


    atribute statice

class SomeClass
  @instances = 0
  @count = -> @instances
  -> @@instances++
  destroy: -> @@instances--

obj = new SomeClass
SomeClass.count! # 1
obj@@instances # 1


    moștenire

class Parent
  -> console.log "created a #{@constructor.name}"
  to-string: -> \parent

class Child extends Parent
  to-string: -> 
    "#{super!}->child"

c = new Child
"#c" # "parent->child"


    mixin

Printable = 
  print: -> console.log "#@"

class Number implements Printable
  (@value=0) ->  
  to-string: -> "Number #{@value}"

n = new Number
n.print! # afișează "Number 0"
    

  Utilizare
    Instalare

necesită `node.js`
$ npm install -g LiveScript

    Rulare

# file.ls
console.log 'running a livescript file'

$ lsc file.ls
running a livescript file

    Compilare
$ lsc -c file.ls
$ cat file.js
console.log('running a livescript file');

    Opțiuni
$ lsc -h

    Avansat
grunt.js cu grunt-livescript


  Resurse
    livescript.net
    preludels.com

    setup pentru un modul node.js cu livescript
    https://github.com/zaboco/livescript-stub

    această prezentare
    https://github.com/zaboco/prezentare-ls

  Eu
    twitter, github, gmail
    zaboco
